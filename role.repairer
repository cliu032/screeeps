var roleRepairer = {

    /** @param {Creep} creep **/
    run: function(creep) {

	    if(creep.carry.energy == 0) {
            creep.memory.working = false;
	    }
	    if(!creep.memory.working && creep.carry.energy == creep.carryCapacity) {
	        creep.memory.working = true;
	        creep.say('ðŸš§ repair');
	    }

	    if(creep.memory.working) {
	        const lookObjects = creep.room.lookAt(creep.pos);
	        if (lookObjects.length > 2) {
	            creep.moveTo(creep.room.controller);
	        }
	        
	        var target = creep.pos.findClosestByRange(FIND_STRUCTURES, {
	            filter: (structure) => structure.hits < (structure.hitsMax * 0.9) && 
	            structure.structureType != STRUCTURE_CONTROLLER &&
	            structure.structureType != STRUCTURE_WALL
	        });
            if(target) {
                if(creep.repair(target) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(target, {visualizePathStyle: {stroke: '#ffffff'}});
                }
            }
            else {
                if(creep.upgradeController(creep.room.controller) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(creep.room.controller, {visualizePathStyle: {stroke: '#ffffff'}});
                }
            }
	    }
	    else {
	        var source = creep.pos.findClosestByPath(FIND_STRUCTURES, {
                filter: (structure) => {
                    return (structure.structureType == STRUCTURE_CONTAINER && structure.store[RESOURCE_ENERGY] >= 50)
                }
	        });
    	    if (source) {
    	        if(creep.withdraw(source, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(source);
                }
    	    }
	    }
	}
};

module.exports = roleRepairer;
